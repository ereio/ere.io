["{\n  \"layout\": \"blog\",\n  \"name\": \"css\",\n  \"notes\": \"# Notes on CSS and HTML\\n\\nI'm really intrigued by how simple but functional css/html can be. If I can find commonly found, reactive features available in pure css/html, I'll place them here. Also a few failed efforts.\\n\\n## Pure CSS Search\\n\\n#### 1. ~~Matching on value attribute from ```<input/>```~~\\n\\n- attempt to narrow a list of items by autocomplete searching and using attribute selectors (likely input[value~=\\\"\\\"]\\n- content can move [from CSS to HTML](https://css-tricks.com/css-attr-function-got-nothin-custom-properties) just not from HTML to CSS as [it was removed from the spec](https://www.w3.org/TR/selectors-3/#content-selectors). it's also ironically placed under section 6.6.6. \\n- ```value=\\\"\\\"```'s are added to inputs within react and other frontend frameworks, so the ability to match on an updated value attribute is lost. I originally thought this was inherent in html input elements\\n  -  Side note, [CSS keyloggers rely on javascript](https://www.bram.us/2018/02/21/css-keylogger-and-why-you-shouldnt-worry-about-it/) and technically do not work in non-javascript environments\\n\\n- note that ```<details>``` toggles an open attribute on the element when clicked. If an html element would allow content to be added on a mouse down, you could set an input tags value without javascript, or just remove all but the selected\\n\\n#### 2. ~~Using the content of a ```<div contenteditable=\\\"true\\\" />```~~\\n\\n- still not an attribute, content is still not selectable even if [editable](https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Editable_content)\\n- the answer might be found with [other global attributes](https://www.w3schools.com/tags/ref_standardattributes.asp)\\n\\n\\n#### 3. ~~Using ```<datalist>``` to autocomplete ```<options/>``` on an ```<input/>```~~\\n\\n- the killer here is really the same as above. You can autocomplete and technically sub-string 'search' terms based on the native implementation of an ```<inputs list=\\\"whatever\\\"/>```\\n- the problem is after you select an option, no attribute is set in the html.\\n- further more, you [cannot style](https://stackoverflow.com/questions/7208786/how-to-style-the-option-of-an-html-select-element) or [manipulate options](https://github.com/w3c/csswg-drafts/issues/2013) you've created for the dataset in the actual options list because the functionality is handled natively. I attempted setting ```<dataset style=\\\"position: absolute;\\\"/>``` and was hoping the static list (assuming it was the same when auto-completing) would start to disappear\\n\\n#### 4. ~~Form submit allowing autocompleted value to be submitted as the slug~~\\n - we can substring search the ```<options />```, but we can't reduce the list of options after search. Fine.\\n - can we at least utilize the search result with a form?\\n - it's either a query param or a POST that has a body\\n\\n#### 5. ~~Submit query params and pull them into css~~\\n - It's not really possible, but i'd have to **whole css file** [for each matching 'thing'](https://stackoverflow.com/questions/23816060/is-it-possible-to-pass-parameters-to-css-file)\\n\\n#### 5. (Cheat) Have an expandable, hoverable A-Z list that will collapse the options based on first letter\\n -  it's not search, but it will serve the same function\\n -  allow letters active and search in an order\\n\\n\\n### Resources\\n - [3D Models in CSS](http://tridiv.com/)\\n - [20+ impressive CSS Only projects](https://medium.mybridge.co/26-impressive-web-projects-built-with-css-only-4a4c2f773a21?gi=23aa236eb46b)\\n - Very ready to give up, found [someone thinking about search in css back in 2013](https://www.redotheweb.com/2013/05/15/client-side-full-text-search-in-css.html)\\n\\n### Content Toggles\\n\\n<details>\\n  <summary>Content toggles</summary><p>\\n\\n```\\n<details>\\n  <summary>Content Toggles</summary>\\n  <p>this details tag and some other content</p>\\n</details>\\n```\\n\\n</p></details>\"\n}","{\n  \"layout\": \"blog\",\n  \"name\": \"dart\",\n  \"notes\": \"## Dart / Flutter\\n\\n### Architecture\\n\\n#### Stack\\n\\n - [redux](https://pub.dev/packages/redux) - just as good in dart\\n\\n - [redux_thunk](https://pub.dev/packages/redux_thunk) - everything is an action\\n\\n - [redux_persist](https://pub.dev/packages/redux_persist) - control in memory and cold storage data from store\\n\\n - flutter_secure_storage\\n\\n#### Flow\\n\\n* Using redux with streams\\n  * Timer+Store vs. Stream\\n    * The store itself is a stream that can be observed / listened to\\n    * The only thing different between them is where you want the stream within the store observed from? the view or still within the store\\n    * Within the store has an extra layer, but has a separation of concerns\\n  * Example is initing a chat observer after authentication\\n    * Leaving this in the view is less friction with streams on streams\\n    * But you sacrifice separation of concerns\\n\\n  * [StreamController example](https://www.woolha.com/tutorials/flutter-using-streamcontroller-and-streamsubscription)\\n  * Converted to streams from using the global onChange and it's noticeably faster\\n\\nLayouts\\n\\n* Use containers that span the height and width of the screen when creating scroll views\\n\\nTodo\\n\\n* find a more explicit way to style with flex\"\n}","{\n  \"layout\": \"blog\",\n  \"name\": \"open-hardware\",\n  \"notes\": \"## Open Hardware\\n\\n#### \\\\- Laptop\\n\\n#### \\\\- Lapdock + Portable SoC Board\\n\\n* [Nexdock 2]()\\n* ROC-RK3328-CC (Renegade)\\n  * 4gb DDR4\\n  * 4 ARM Cortex-A53 @ 1.4GHz\\n  * [ARM Mali-450 MP4](https://www.notebookcheck.net/ARM-Mali-450-MP4.116281.0.html)\"\n}","{\n  \"layout\": \"blog\",\n  \"name\": \"openwrt\",\n  \"notes\": \"## OpenWRT and config\\n\\n\\n\\n\"\n}","{\n  \"layout\": \"blog\",\n  \"name\": \"printing\",\n  \"notes\": \"## Notes on 3D printing\\n<br>\\n\\n#### Getting Started Printing - CR-20 Pro\\n<br>\\n\\n##### Pain Points\\n - Clamp to feed filament was not secured down enough, ended up needing extra tightening on both ends\\n - The Z-Offset needs to be touching the board at 0.02. This caused a bit of confusion as tutorials made it sound as though space was needed between a 0.02mm piece of paper and the extruder\\n - Filament was tangled while I was attempting to feed it without first having tightened the feed clamp\\n\\n##### After Thoughts\\n - [Bed Leveling Calibation](https://i.imgur.com/tbvOlB9.jpg)\\n - Use Cura for next print instead of animal model from SDCard\\n - Use benchy for confirming the printer can handle whatever and is calibrated\\n\\n#### Potential DIY Printer Stack\\n\\n* Boards\\n  * Mega Arduino w/ RAMPS\\n  * RAMBo mini (RepRap Arduino-compatible Mother Board)\\n  * [EINSY RAMBo](https://www.printedsolid.com/products/einsy-rambo-1-1)\\n* [Firmware](https://reprap.org/wiki/List_of_Firmware)\\n  * Marlin\\n  * RAMPS (?)\\n\\nRAMBo boards are based on Arduino, most probably are.\\n\\n\\n### Print List\\n - [benchy](https://www.thingiverse.com/thing:763622)\\n - [cats]()\\n - [halloween bulba]()\\n - [polygonal starters]()\\n - [baby yoda]()\\n - [nanoleaf replicas](https://www.thingiverse.com/thing:3230905) [(or one without arduino?)](https://www.thingiverse.com/thing:3354082)\"\n}","{\n  \"layout\": \"blog\",\n  \"name\": \"punk\",\n  \"notes\": \"### The Sound (Jeopardy)\\n\\n* joy divison / the frights / kings of leon / the doors (that organ)\\n* favorites\\n  * the heartland\\n  * jeopardy\\n*\"\n}","{\n  \"layout\": \"blog\",\n  \"name\": \"react-native\",\n  \"notes\": \"# Notes on React Native\\n\\n## Architecture Overview\\n\\nThe greatest injustice I've seen when developing web projects is the unnecessary complexity around project structure. Organizing your files by domain (or feature), instead of by function, allows your code to  also map itself like a mirror of the application experience\\n```\\n── app (or src)\\n   ├── assets\\n   ├── global\\n   ├── libs\\n   ├── store\\n   ├── views\\n   └── index.js\\n```\\n\\nFor example, if I had a view titled \\\"Profile\\\" in the UI where you could update a users avatar under an editing section, which project structure would more intuitively represent the layout of change that feature?\\n```\\n── app (or src)\\n   ├── assets\\n   ├── global\\n   ├── libs\\n   ├── store\\n   │   ├── settings \\n   │   └── user \\n   │       ├── actions.js \\n   │       ├── reducer.js \\n   │       └── state.js \\n   ├── views\\n   │   └── profile \\n   │       ├── user-profile\\n   │       │   └── index.js \\n   │       └── index.js \\n   └── index.js\\n```\\n\\n\\n---\\n\\n## UI Libraries\\n\\n### [react-native-paper](https://callstack.github.io/react-native-paper/getting-started.html) \\n   - Minimally styled components\\n   - Easy to override styling\\n\\n\\n### [native-base]() (not recommended)\\n - Heavily opinionated styling\\n - Absolute positioning on elements makes it hard to layout\\n - Overriding styling is sometimes not possible\\n - Bloated theming \\n\\n---\\n\\n## Domain Logic\\n\\n### Helpful Commands\\n```bash\\n# android\\nemulator -list-avds\\nemulator -avd <id>\\n\\n# ios\\nxcrun simctl delete unavailable\\nxcrun simctl list devices\\nxcrun simctl boot <id>\\n```\\n\\n---\\n\\n### Other\\n - [dealing with fonts](https://github.com/react-native-training/react-native-fonts)\\n - [using proportions and ratios](https://facebook.github.io/react-native/docs/pixelratio.html) instead of static px values\\n\\n### Tips\\n<details><summary>Absolute Import Paths</summary><p>\\n\\n```\\nmodule.exports = {\\n  presets: ['module:metro-react-native-babel-preset', 'module:react-native-dotenv'],\\n  plugins: [\\n    ['module-resolver', {\\n      alias: {\\n        app: './app',\\n      }\\n    }]\\n  ]\\n};\\n```\\n</p></details>\\n\\n### Tricks\\n<details><summary>Custom iOS Back</summary><p>\\n\\n```jsx\\n   <TouchableOpacity\\n    onPress={navigation.getParam('onNavigateBack')}\\n    style={{ flex: 1, flexDirection: 'row', alignItems: 'center' }}>\\n        <Icon style={{ color: navColors.appleBlue, paddingTop: 3, fontSize: 34 }} name='ios-arrow-back' />\\n        <Text style={{ color: navColors.appleBlue, paddingLeft: 4, fontSize: 18 }} >Back</Text>\\n    </TouchableOpacity>\\n```\\n\\n</p></details>\\n<br>\\n<details><summary>Hidden UI Blocking Layer</summary><p>\\n\\n```jsx\\n    <TouchableWithoutFeedback onPress={this.onForceLinkAlert}>\\n            <View style={{\\n              position: 'absolute',\\n              elevation: 10,\\n              right: 0,\\n              top: 0,\\n              height: 75,\\n              width: 75,\\n              opacity: 0,\\n              backgroundColor: colors.primary,\\n              borderColor: colors.primary,\\n              borderWidth: 1,\\n              borderRadius: 50,\\n              zIndex: 5,\\n            }}/>\\n          </TouchableWithoutFeedback>\\n```\\n</p></details>\"\n}","{\n  \"layout\": \"blog\",\n  \"name\": \"rust\",\n  \"notes\": \"## Notes on Rust\\n\\n* GUI standard or best practice [seems fragmented](https://raphlinus.github.io/ui/druid/2019/11/22/reactive-ui.html)\\n  * [moxie](https://blog.anp.lol/rust/moxie-intro/)\\n  * [druid](https://github.com/xi-editor/druid)\\n\\n* Would be preferred over flutter, in terms of accessibility and portability, if the developer experience was more straight forward\\n* It's already hard to sell dart/flutter as inclusive and friendly to web devs\"\n}"]