{
  "layout": "blog",
  "name": "dart-flutter",
  "notes": "## Dart / Flutter\n\n### Architecture\n\n#### Stack\n\n* [redux](https://pub.dev/packages/redux) - just as good in dart\n* [redux_thunk](https://pub.dev/packages/redux_thunk) - everything is an action\n* [redux_persist](https://pub.dev/packages/redux_persist) - control in memory and cold storage data from store\n* flutter_secure_storage\n\n#### Flow\n\n* Using redux with streams\n\n  * Timer+Store vs. Stream\n\n    * The store itself is a stream that can be observed / listened to\n    * The only thing different between them is where you want the stream within the store observed from? the view or still within the store\n    * Within the store has an extra layer, but has a separation of concerns\n  * Example is initializing a chat observer after authentication\n\n    * Leaving this in the view is less friction with streams on streams\n    * But you sacrifice separation of concerns\n  * [StreamController example](https://www.woolha.com/tutorials/flutter-using-streamcontroller-and-streamsubscription)\n  * Converted to streams from using the global onChange and it's noticeably faster\n\n#### Common Patterns\n```js\nconst newUsers = users.filter(user => user.new);\n```\n```dart\nfinal newUsers = users.where(user => user.new).toList();\n```\n\n#### UI/UX\n\n* Use containers that span the height and width of the screen when creating scroll views\n* [Implicit Animations Tutorial](https://medium.com/flutter/custom-implicit-animations-in-flutter-with-tweenanimationbuilder-c76540b47185)\n\n#### Resources\n\n* [showing a more global snackbar](https://stackoverflow.com/questions/49578529/flutter-filter-list-as-per-some-condition)\n* https://flutter.dev/docs/cookbook/forms/focus\n#### Todo\n\n* find a more explicit way to style with flex"
}