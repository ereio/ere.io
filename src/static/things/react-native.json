{
  "layout": "blog",
  "name": "react-native",
  "notes": "# Notes on React Native\n\n## Architecture Overview\n\nThe greatest injustice I've seen when developing web projects is the unnecessary complexity around project structure. Organizing your files by domain (or feature), instead of by function, allows your code to  also map itself like a mirror of the application experience\n```\n── app (or src)\n   ├── assets\n   ├── global\n   ├── libs\n   ├── store\n   ├── views\n   └── index.js\n```\n\nFor example, if I had a view titled \"Profile\" in the UI where you could update a users avatar under an editing section, which project structure would more intuitively represent the layout of change that feature?\n```\n── app (or src)\n   ├── assets\n   ├── global\n   ├── libs\n   ├── store\n   │   ├── settings \n   │   └── user \n   │       ├── actions.js \n   │       ├── reducer.js \n   │       └── state.js \n   ├── views\n   │   └── profile \n   │       ├── user-profile\n   │       │   └── index.js \n   │       └── index.js \n   └── index.js\n```\n\n\n---\n\n## UI Libraries\n\n### [react-native-paper](https://callstack.github.io/react-native-paper/getting-started.html) \n   - Minimally styled components\n   - Easy to override styling\n\n\n### [native-base]() (not recommended)\n - Heavily opinionated styling\n - Absolute positioning on elements makes it hard to layout\n - Overriding styling is sometimes not possible\n - Bloated theming \n\n---\n\n## Domain Logic\n\n### Helpful Commands\n```bash\n# android\nemulator -list-avds\nemulator -avd <id>\n\n# ios\nxcrun simctl delete unavailable\nxcrun simctl list devices\nxcrun simctl boot <id>\n```\n### Tips\n<details><summary>Absolute Import Paths</summary><p>\n\n```\nmodule.exports = {\n  presets: ['module:metro-react-native-babel-preset', 'module:react-native-dotenv'],\n  plugins: [\n    ['module-resolver', {\n      alias: {\n        app: './app',\n      }\n    }]\n  ]\n};\n```\n</p></details>\n\n### Tricks\n<details><summary>Custom iOS Back</summary><p>\n\n```jsx\n   <TouchableOpacity\n    onPress={navigation.getParam('onNavigateBack')}\n    style={{ flex: 1, flexDirection: 'row', alignItems: 'center' }}>\n        <Icon style={{ color: navColors.appleBlue, paddingTop: 3, fontSize: 34 }} name='ios-arrow-back' />\n        <Text style={{ color: navColors.appleBlue, paddingLeft: 4, fontSize: 18 }} >Back</Text>\n    </TouchableOpacity>\n```\n\n</p></details>\n<br>\n<details><summary>Hidden UI Blocking Layer</summary><p>\n\n```jsx\n    <TouchableWithoutFeedback onPress={this.onForceLinkAlert}>\n            <View style={{\n              position: 'absolute',\n              elevation: 10,\n              right: 0,\n              top: 0,\n              height: 75,\n              width: 75,\n              opacity: 0,\n              backgroundColor: colors.primary,\n              borderColor: colors.primary,\n              borderWidth: 1,\n              borderRadius: 50,\n              zIndex: 5,\n            }}/>\n          </TouchableWithoutFeedback>\n```\n</p></details>"
}