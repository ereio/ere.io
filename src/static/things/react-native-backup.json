{
  "layout": "blog",
  "name": "react-native-backup",
  "notes": "# Notes on React Native\n\n## Architecture Overview\n\nThe greatest injustice I've seen in software development is the unnecessary complexity around project structure. Organizing your files by domain (or feature), instead of by function, allows your code to mirror the UI/UX and act as a virtual map of features\n\n```\n── app (or src)\n   ├── assets\n   ├── global\n   ├── libs\n   ├── store\n   ├── views\n   └── index.js\n```\n\nFor example, it's your first day at a new startup. Imagine you knew next to nothing about the project you're working on other than that you have users and they manage cooking recipes in the project. A manager asks you to \"change the profile section to look like facebook\". Which file structure would help you get started the fastest? \n\n### By Domain\n\n```\n── app (or src)\n   ├── assets\n   ├── global\n   ├── libs\n   ├── store\n   │   ├── auth \n   │   ├── recipes \n   │   ├── settings \n   │   └── user \n   │       ├── actions.js \n   │       ├── reducer.js \n   │       └── state.js \n   ├── views\n   │   ├── recipes \n   │   └── user \n   │       ├── profile\n   │       │   └── index.js (*)\n   │       └── index.js \n   └── index.js\n``` \n\n### By Function (Type)\n```\n── app (or src)\n   ├── assets\n   ├── styles\n   ├── utils\n   ├── components\n   │   └── user \n   │       ├── UserComponent.js\n   │       └── profile\n   │           └── UserProfileComponent.js\n   ├── pages\n   │   └── user\n   │       └── profile\n   │           └── ProfilePage.js\n   ├── routes\n   │   └── user\n   │       └── profile\n   │           └── UserRoute.js\n   ├── redux\n   ├── index.android.js\n   ├── index.ios.js \n   ...\n``` \n\nWhile preference is subjective, I've onboarded new team members on projects with both, but I've had them deploying faster when structuring 'by domain'.\n\nOffloading the cognitive map of the project to the file structure prevents developers from relying solely on UML or diagrams that structure the flow of the project. The file structure acts as a map to the UI and even the domain logic contained within. You may have observed that the ```by domain``` example seemingly has a top layer of ```by function``` structure. Viewing the project with higher architectural scope allows you to view the 'store' and 'views' as feature sets. Many projects do not have explicit UI/UX (CLI tools or API's) or use a 'store' for handling immutable state (potentially API's). Instead, they may be labeled as 'output' but still contain a 'store' to manage state.\n\n---\n\n## UI Libraries\n\n### [react-native-paper](https://callstack.github.io/react-native-paper/getting-started.html) \n   - Minimally styled components\n   - Easy to override styling\n\n\n### [native-base]() (not recommended)\n - Heavily opinionated styling\n - Absolute positioning on elements makes it hard to layout\n - Overriding styling is sometimes not possible\n - Bloated theming \n\n---\n\n## Domain Logic\n\n### Helpful Commands\n```bash\n# android\nemulator -list-avds\nemulator -avd <id>\n\n# ios\nxcrun simctl delete unavailable\nxcrun simctl list devices\nxcrun simctl boot <id>\n\n## record\nxcrun simctl io booted recordVideo <filename>.<extension>\n```\n\n---\n\n### Other\n - [dealing with fonts](https://github.com/react-native-training/react-native-fonts)\n - [using proportions and ratios](https://facebook.github.io/react-native/docs/pixelratio.html) instead of static px values\n\n### Tips\n<details><summary>Absolute Import Paths</summary><p>\n\n```\nmodule.exports = {\n  presets: ['module:metro-react-native-babel-preset', 'module:react-native-dotenv'],\n  plugins: [\n    ['module-resolver', {\n      alias: {\n        app: './app',\n      }\n    }]\n  ]\n};\n```\n</p></details>\n\n### Tricks\n<details><summary>Custom iOS Back</summary><p>\n\n```jsx\n   <TouchableOpacity\n    onPress={navigation.getParam('onNavigateBack')}\n    style={{ flex: 1, flexDirection: 'row', alignItems: 'center' }}>\n        <Icon style={{ color: navColors.appleBlue, paddingTop: 3, fontSize: 34 }} name='ios-arrow-back' />\n        <Text style={{ color: navColors.appleBlue, paddingLeft: 4, fontSize: 18 }} >Back</Text>\n    </TouchableOpacity>\n```\n\n</p></details>\n<br>\n<details><summary>Hidden UI Blocking Layer</summary><p>\n\n```jsx\n    <TouchableWithoutFeedback onPress={this.onForceLinkAlert}>\n            <View style={{\n              position: 'absolute',\n              elevation: 10,\n              right: 0,\n              top: 0,\n              height: 75,\n              width: 75,\n              opacity: 0,\n              backgroundColor: colors.primary,\n              borderColor: colors.primary,\n              borderWidth: 1,\n              borderRadius: 50,\n              zIndex: 5,\n            }}/>\n          </TouchableWithoutFeedback>\n```\n</p></details>"
}